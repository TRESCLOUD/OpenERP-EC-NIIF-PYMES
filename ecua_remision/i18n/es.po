# Translation of OpenERP Server.
# This file contains the translation of the following modules:
#	* ecua_remision
#
msgid ""
msgstr ""
"Project-Id-Version: OpenERP Server 6.0.3\n"
"Report-Msgid-Bugs-To: support@openerp.com\n"
"POT-Creation-Date: 2012-01-26 17:00+0000\n"
"PO-Revision-Date: 2012-01-26 12:04-0500\n"
"Last-Translator: Christopher Ormaza <cormaza@ecuadorenlinea.net>\n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: \n"

#. module: ecua_remision
#: field:stock.partial.picking,delivery_note:0
msgid "Make Delivery Note"
msgstr "Realizar Guía de Remisión"

#. module: ecua_remision
#: model:ir.ui.menu,name:ecua_remision.delivery_notes_menu
#: model:ir.ui.menu,name:ecua_remision.remision
msgid "Guías de Remisión"
msgstr "Guías de Remisión"

#. module: ecua_remision
#: selection:account.remision,state:0
msgid "Confirmed"
msgstr "Confirmado"

#. module: ecua_remision
#: field:account.remision,sale_order:0
msgid "Sale order"
msgstr "Orden de Venta"

#. module: ecua_remision
#: sql_constraint:account.remision:0
msgid "There is another delivery note generated with this number, please verify"
msgstr "Existe otra guía de remisión generada con este número, por favor verifique"

#. module: ecua_remision
#: code:addons/ecua_remision/wizard/cancel_delivery_notes_wizard.py:66
#, python-format
msgid "Cancel Delivery Note"
msgstr "Cancelar Guía de Remisión"

#. module: ecua_remision
#: model:ir.model,name:ecua_remision.model_account_remision
msgid "account.remision"
msgstr "Guía de Remisión"

#. module: ecua_remision
#: model:ir.model,name:ecua_remision.model_account_remision_line
msgid "account.remision.line"
msgstr "Líneas de Guía de Remisión"

#. module: ecua_remision
#: view:account.remision:0
#: model:ir.actions.act_window,name:ecua_remision.action_account_remision
#: view:sale.order:0
#: field:sale.order,remision_ids:0
#: field:stock.picking,remision_ids:0
msgid "Delivery Notes"
msgstr "Guías de Remisión"

#. module: ecua_remision
#: field:stock.partial.picking,automatic:0
msgid "Automatic?"
msgstr "Automático?"

#. module: ecua_remision
#: field:account.cancel.remision.line.wizard,wizard_id:0
msgid "Wizard"
msgstr "Asistente"

#. module: ecua_remision
#: constraint:res.company:0
msgid "Error! You can not create recursive companies."
msgstr "¡Error! No se pueden crear compañías recursivas."

#. module: ecua_remision
#: constraint:stock.move:0
msgid "You must assign a production lot for this product"
msgstr "Debe asignar un lote de producción para este producto"

#. module: ecua_remision
#: view:account.remision:0
msgid "Set to draft"
msgstr "Regresar a Borrador"

#. module: ecua_remision
#: field:account.remision.line,remision_id:0
msgid "Delivery note"
msgstr "Guía de Remisión"

#. module: ecua_remision
#: view:account.cancel.remision.wizard:0
msgid "You have to input numbers of Delivery Note(s) that you'll create in canceled state and Date to cancel"
msgstr "Usted debe ingresar los números de Guías de Remisión que se crearan en estado cancelado con la fecha de cancelación"

#. module: ecua_remision
#: selection:account.remision,state:0
msgid "Draft"
msgstr "Borrador"

#. module: ecua_remision
#: view:account.remision:0
msgid "Transfer Motive"
msgstr "Motivo del Traslado"

#. module: ecua_remision
#: model:ir.actions.act_window,name:ecua_remision.action_partial_picking
msgid "Process Picking"
msgstr "Procesar albarán"

#. module: ecua_remision
#: model:ir.model,name:ecua_remision.model_stock_picking
msgid "Picking List"
msgstr "Albarán"

#. module: ecua_remision
#: field:account.remision,delivery_date:0
msgid "Delivery date"
msgstr "Fecha de entrega"

#. module: ecua_remision
#: model:ir.model,name:ecua_remision.model_account_cancel_remision_line_wizard
msgid "account.cancel.remision.line.wizard"
msgstr "account.cancel.remision.line.wizard"

#. module: ecua_remision
#: field:account.remision,authorizacion_id:0
msgid "Authorization"
msgstr "Autorización"

#. module: ecua_remision
#: model:ir.actions.act_window,name:ecua_remision.action_account_cancel_remisions_wizard
#: model:ir.ui.menu,name:ecua_remision.cancel_remision_menu
msgid "Cancel Delivery Notes"
msgstr "Cancelar Guías de Remisión"

#. module: ecua_remision
#: code:addons/ecua_remision/wizard/stock_partial_picking.py:379
#, python-format
msgid "Product Moves"
msgstr "Product Moves"

#. module: ecua_remision
#: sql_constraint:sale.order:0
msgid "Order Reference must be unique !"
msgstr "¡La referencia del pedido debe ser única!"

#. module: ecua_remision
#: field:account.remision,automatic_number:0
msgid "number"
msgstr "number"

#. module: ecua_remision
#: view:account.remision:0
#: code:addons/ecua_remision/wizard/stock_partial_picking.py:276
#, python-format
msgid "Delivery Note"
msgstr "Guía de Remisión"

#. module: ecua_remision
#: constraint:stock.move:0
msgid "You try to assign a lot which is not from the same product"
msgstr "Está intentando asignar un lote que no es del mismo producto"

#. module: ecua_remision
#: selection:account.remision,type:0
msgid "Internal Delivery"
msgstr "Envío Interno"

#. module: ecua_remision
#: field:account.cancel.remision.wizard,company_id:0
msgid "Company"
msgstr "Compañía"

#. module: ecua_remision
#: code:addons/ecua_remision/objects/delivery_note.py:31
#, python-format
msgid "Invalid action !"
msgstr "Invalid action !"

#. module: ecua_remision
#: field:account.remision,state:0
msgid "state"
msgstr "Estado"

#. module: ecua_remision
#: model:ir.model,name:ecua_remision.model_account_cancel_remision_wizard
msgid "account.cancel.remision.wizard"
msgstr "account.cancel.remision.wizard"

#. module: ecua_remision
#: model:ir.model,name:ecua_remision.model_stock_move
msgid "Stock Move"
msgstr "Movimiento stock"

#. module: ecua_remision
#: model:ir.module.module,description:ecua_remision.module_meta_information
msgid ""
" Delivery notes in ecuador has a authorized document by SRI,\n"
"        These have sequence by authorization.\n"
"         "
msgstr ""
" Delivery notes in ecuador has a authorized document by SRI,\n"
"        These have sequence by authorization.\n"
"         "

#. module: ecua_remision
#: code:addons/ecua_remision/wizard/stock_partial_picking.py:149
#: code:addons/ecua_remision/wizard/stock_partial_picking.py:214
#, python-format
msgid "Do not exist authorization for this number of secuence, please check"
msgstr "Do not exist authorization for this number of secuence, please check"

#. module: ecua_remision
#: view:account.cancel.remision.wizard:0
msgid "Cancel Remisions"
msgstr "Cancelar Guías de Remisión"

#. module: ecua_remision
#: field:account.remision,remision_line:0
msgid "Delivery note lines"
msgstr "Líneas de Guía de Remisión"

#. module: ecua_remision
#: field:account.remision,delivery_address:0
msgid "Address"
msgstr "Dirección"

#. module: ecua_remision
#: field:account.cancel.remision.wizard,date:0
msgid "Date"
msgstr "Fecha"

#. module: ecua_remision
#: model:ir.model,name:ecua_remision.model_stock_partial_picking
msgid "Partial Picking"
msgstr "Empaquetado parcial"

#. module: ecua_remision
#: field:account.remision,stock_picking_id:0
msgid "Picking"
msgstr "Albarán"

#. module: ecua_remision
#: field:account.remision,type:0
msgid "type"
msgstr "Tipo"

#. module: ecua_remision
#: code:addons/ecua_remision/objects/stock_picking.py:97
#, python-format
msgid "Error, no partner !"
msgstr "Error, no partner !"

#. module: ecua_remision
#: view:account.remision:0
msgid "Print Delivery Note"
msgstr "Imprimir Guía de Remisión"

#. module: ecua_remision
#: field:account.cancel.remision.line.wizard,status:0
msgid "Status"
msgstr "Estado"

#. module: ecua_remision
#: field:account.remision.line,product_id:0
msgid "product"
msgstr "Producto"

#. module: ecua_remision
#: field:account.remision,printer_id:0
#: field:stock.partial.picking,printer_id:0
#: field:stock.picking,printer_id:0
msgid "Printer Point"
msgstr "Punto de Emisión"

#. module: ecua_remision
#: field:stock.picking,delivery_note:0
msgid "Delivery Note?"
msgstr "Guía de Remisión?"

#. module: ecua_remision
#: view:account.cancel.remision.wizard:0
#: field:account.cancel.remision.wizard,line_ids:0
msgid "Lines"
msgstr "Líneas"

#. module: ecua_remision
#: selection:account.remision,type:0
msgid "Delivery for sale"
msgstr "Venta"

#. module: ecua_remision
#: model:ir.model,name:ecua_remision.model_res_company
msgid "Companies"
msgstr "Compañías"

#. module: ecua_remision
#: code:addons/ecua_remision/objects/delivery_note.py:94
#: code:addons/ecua_remision/wizard/stock_partial_picking.py:149
#: code:addons/ecua_remision/wizard/stock_partial_picking.py:214
#, python-format
msgid "Invalid action!"
msgstr "Invalid action!"

#. module: ecua_remision
#: field:res.company,delivery_note_defaults:0
msgid "Delivery Note per Defaults?"
msgstr "Guías de Remisión Por Defecto?"

#. module: ecua_remision
#: field:delivery.carrier,placa:0
msgid "Placa"
msgstr "Placa"

#. module: ecua_remision
#: view:account.remision.line:0
msgid "Delivery note line"
msgstr "Líneas de Guía de Remisión"

#. module: ecua_remision
#: field:account.remision,delivery_carrier:0
#: model:ir.model,name:ecua_remision.model_delivery_carrier
#: field:stock.partial.picking,carrier_id:0
msgid "Carrier"
msgstr "Transportista"

#. module: ecua_remision
#: code:addons/ecua_remision/wizard/stock_partial_picking.py:375
#, python-format
msgid "Products"
msgstr "Productos"

#. module: ecua_remision
#: view:account.cancel.remision.wizard:0
msgid "Cancel Retentions"
msgstr "Cancelar Guía de Remisión"

#. module: ecua_remision
#: code:addons/ecua_remision/objects/delivery_note.py:94
#, python-format
msgid "Not exist number for the document, please check"
msgstr "Not exist number for the document, please check"

#. module: ecua_remision
#: field:account.remision,transfer_date:0
msgid "Transfer date"
msgstr "Fecha de envío"

#. module: ecua_remision
#: field:account.remision,automatic:0
msgid "Automatic"
msgstr "Automática"

#. module: ecua_remision
#: view:account.remision:0
#: view:account.remision.line:0
msgid "Delivery Note Lines"
msgstr "Líneas de Guía de Remisión"

#. module: ecua_remision
#: field:account.remision.line,quantity:0
msgid "Quantity"
msgstr "Cantidad"

#. module: ecua_remision
#: field:account.remision,shop_id:0
#: field:stock.partial.picking,shop_id:0
#: field:stock.picking,shop_id:0
msgid "Shop"
msgstr "Agencia"

#. module: ecua_remision
#: code:addons/ecua_remision/objects/delivery_note.py:31
#, python-format
msgid "Cannot delete delivery note(s) that are already confirmed !"
msgstr "Cannot delete delivery note(s) that are already confirmed !"

#. module: ecua_remision
#: model:ir.model,name:ecua_remision.model_sale_order
msgid "Sales Order"
msgstr "Pedido de venta"

#. module: ecua_remision
#: view:account.remision:0
msgid "Reference"
msgstr "Referencia"

#. module: ecua_remision
#: code:addons/ecua_remision/objects/stock_picking.py:54
#, python-format
msgid "Products to Process"
msgstr "Products to Process"

#. module: ecua_remision
#: constraint:account.cancel.remision.line.wizard:0
#: code:addons/ecua_remision/wizard/cancel_delivery_notes_wizard.py:105
#: constraint:stock.partial.picking:0
#, python-format
msgid "The number is incorrect, it must be like 001-00X-000XXXXXX, X is a number"
msgstr "The number is incorrect, it must be like 001-00X-000XXXXXX, X is a number"

#. module: ecua_remision
#: code:addons/ecua_remision/wizard/stock_partial_picking.py:161
#, python-format
msgid ""
"Generated by the picking # %s\" % picking['name']) ,\n"
"                                        'delivery_address': picking['address_id']['id'],\n"
"                                        'partner_id': picking ['partner_id']['id'],\n"
"                                        'stock_picking_id': picking['id'],\n"
"                                        'delivery_carrier': carrier,\n"
"                                        'shop_id':picking['shop_id']['id'],\n"
"                                        'printer_id':picking['printer_id']['id'],\n"
"                                        'sale_order':picking['sale_id']['id'],\n"
"                                        'type': self.defined_type_remision(picking['type']),\n"
"                                        'automatic': object.automatic,\n"
"                                        }\n"
"                            remision_id = remision_obj.create(cr, uid, vals_remi, context)\n"
"                            for line in picking.move_lines:\n"
"                                vals_remi_line= {\n"
"                                                 'quantity': line['product_qty'],\n"
"                                                 'product_id': line['product_id']['id'],\n"
"                                                 'remision_id': remision_id,\n"
"                                                 }\n"
"                                remision_line_id = remision_line_obj.create(cr, uid, vals_remi_line, context)\n"
"                        elif (picking['type']=='internal'):\n"
"                            vals_remi= {'number_out': number,\n"
"                                        'authorizacion_id': autorizacion,\n"
"                                        'partner_id': picking ['address_id']['partner_id']['id'],\n"
"                                        'transfer_date': time.strftime('%Y-%m-%d'),\n"
"                                        'delivery_date': picking['min_date'],\n"
"                                        'delivery_address': picking['address_id']['id'],\n"
"                                        'stock_picking_id': picking['id'],\n"
"                                        'shop_id':picking['shop_id']['id'],\n"
"                                        'printer_id':picking['printer_id']['id'],\n"
"                                        'type': self.defined_type_remision(picking['type']),\n"
"                                        'automatic': object.automatic,\n"
"                                        }\n"
"                            remision_id = remision_obj.create(cr, uid, vals_remi, context)\n"
"                            for line in picking.move_lines:\n"
"                                vals_remi_line= {\n"
"                                                 'quantity': line['product_qty'],\n"
"                                                 'product_id': line['product_id']['id'],\n"
"                                                 'remision_id': remision_id,\n"
"                                                 }\n"
"                                remision_line_id = remision_line_obj.create(cr, uid, vals_remi_line, context)\n"
"                        remision_obj.action_confirm(cr, uid, [remision_id,], context)\n"
"                    elif picking['state']=='assigned':\n"
"                        if picking['backorder_id']['id']:\n"
"                            picking=stock_picking_obj.browse(cr, uid, picking['backorder_id']['id'], context)\n"
"                            if bool:\n"
"                                number = self.pool.get('ir.sequence').get_id(cr, uid, vals_aut['sequence'])\n"
"                                autorizacion = vals_aut['authorization']\n"
"                            else:\n"
"                                shop = self.pool.get('sale.shop').search(cr, uid,[])[0]\n"
"                                company = self.pool.get('res.company').search(cr, uid,[])[0]\n"
"                                number = object['number']\n"
"                                auth = self.pool.get('sri.authorization').get_auth(cr, uid, 'delivery_note', company, shop, number, context)\n"
"                                if not auth['authorization']:\n"
"                                    raise osv.except_osv(_('Invalid action!'), _('Do not exist authorization for this number of secuence, please check'))\n"
"                                else:\n"
"                                    autorizacion = auth['authorization']\n"
"                            if picking['type']=='out':\n"
"                                if picking['carrier_id']:\n"
"                                    carrier= picking['carrier_id']['id']\n"
"                                else:\n"
"                                    carrier= object['delivery_carrier']['id']\n"
"                                vals_remi= {'number_out': number,\n"
"                                            'authorizacion_id': autorizacion,\n"
"                                            'transfer_date': time.strftime('%Y-%m-%d'),\n"
"                                            'delivery_date': picking['min_date'],\n"
"                                            'motive': _(\"Generated by the picking # %s\" % picking['name']),\n"
"                                            'delivery_address': picking['address_id']['id'],\n"
"                                            'partner_id': picking ['partner_id']['id'],\n"
"                                            'stock_picking_id': picking['id'],\n"
"                                            'delivery_carrier': carrier,\n"
"                                            'shop_id':picking['shop_id']['id'],\n"
"                                            'printer_id':picking['printer_id']['id'],\n"
"                                            'sale_order':picking['sale_id']['id'],\n"
"                                            'type': self.defined_type_remision(picking['type']),\n"
"                                            'automatic': object.automatic,\n"
"                                            }\n"
"                                remision_id = remision_obj.create(cr, uid, vals_remi, context)\n"
"                                for line in picking.move_lines:\n"
"                                    vals_remi_line= {\n"
"                                                 'quantity': line['product_qty'],\n"
"                                                 'product_id': line['product_id']['id'],\n"
"                                                 'remision_id': remision_id,\n"
"                                                 }\n"
"                                    remision_line_id = remision_line_obj.create(cr, uid, vals_remi_line, context)\n"
"                            elif (picking['type']=='internal'):\n"
"                                vals_remi= {'number_out': number,\n"
"                                            'authorizacion_id': autorizacion,\n"
"                                            'partner_id': picking ['address_id']['partner_id']['id'],\n"
"                                            'transfer_date': time.strftime('%Y-%m-%d'),\n"
"                                            'delivery_date': picking['min_date'],\n"
"                                            'delivery_address': picking['address_id']['id'],\n"
"                                            'stock_picking_id': picking['id'],\n"
"                                            'shop_id':picking['shop_id']['id'],\n"
"                                            'printer_id':picking['printer_id']['id'],\n"
"                                            'type': self.defined_type_remision(picking['type']),\n"
"                                            'automatic': object.automatic,\n"
"                                            }\n"
"                                remision_id = remision_obj.create(cr, uid, vals_remi, context)\n"
"                                for line in picking.move_lines:\n"
"                                    vals_remi_line= {\n"
"                                             'quantity': line['product_qty'],\n"
"                                             'product_id': line['product_id']['id'],\n"
"                                             'remision_id': remision_id,\n"
"                                             }\n"
"                                    remision_line_id = remision_line_obj.create(cr, uid, vals_remi_line, context)\n"
"                            remision_obj.action_confirm(cr, uid, [remision_id,], context)\n"
"\n"
"        act_obj = self.pool.get('ir.actions.act_window')\n"
"        mod_obj = self.pool.get('ir.model.data')\n"
"\n"
"        model_data_ids = mod_obj.search(cr,uid,[('model','=','ir.ui.view'),('name','=','view_account_remision_form')])\n"
"        resource_id = mod_obj.read(cr, uid, model_data_ids, fields=['res_id'])[0]['res_id']\n"
"        \n"
"        if remision_id:\n"
"            return {\n"
"                'name': _('Delivery Note'),\n"
"                'view_type': 'form',\n"
"                'view_mode': 'form',\n"
"                'res_model': 'account.remision',\n"
"                'views': [(resource_id,'form')],\n"
"                'type': 'ir.actions.act_window',\n"
"                'target': 'current',\n"
"                'res_id': [remision_id],\n"
"                'context': context,\n"
"            }\n"
"        else:\n"
"            return {'type': 'ir.actions.act_window_close'}\n"
"\n"
"    def _get_automatic(self, cr, uid, context=None):\n"
"        user = self.pool.get('res.users').browse(cr, uid, uid, context=context)\n"
"        return user.company_id.generate_automatic\n"
"\n"
"    def default_get(self, cr, uid, fields, context=None):\n"
"        doc_obj = self.pool.get('sri.type.document')\n"
"        if context is None:\n"
"            context = {}\n"
"        values = {}\n"
"        pick_obj = self.pool.get('stock.picking')\n"
"        res = super(stock_partial_picking, self).default_get(cr, uid, fields, context)\n"
"        picking_ids = context.get('active_ids', [])\n"
"        if not picking_ids:\n"
"            return res\n"
"        objs = pick_obj.browse(cr , uid, picking_ids)\n"
"        company_id = self.pool.get('res.company')._company_default_get(cr, uid, 'stock.picking', context=context)\n"
"        automatic = self._get_automatic(cr, uid, context)\n"
"        for obj in objs:\n"
"            if obj.type in ('out', 'internal'):\n"
"                if 'automatic_number' in fields and 'number' in fields:\n"
"                    auth_line_id = doc_obj.search(cr, uid, [('name','=','delivery_note'), ('printer_id','=',obj.printer_id.id), ('shop_id','=',obj.shop_id.id), ('state','=',True),])\n"
"                    if auth_line_id:\n"
"                        if automatic:\n"
"                            automatic_number = doc_obj.get_next_value_secuence(cr, uid, 'delivery_note', False, company_id, obj.shop_id.id, obj.printer_id.id, 'account.remision', 'number_out', context)\n"
"                            res.update({'automatic_number': automatic_number})\n"
"                            res.update({'number': automatic_number})\n"
"                if 'carrier_id' in fields:\n"
"                    res.update({'carrier_id': obj.carrier_id.id})                \n"
"                if 'delivery_note' in fields:\n"
"                    res.update({'delivery_note': obj.delivery_note})\n"
"                if 'shop_id' in fields:\n"
"                    res.update({'shop_id': obj.shop_id.id})\n"
"                if 'printer_id' in fields:\n"
"                    res.update({'printer_id': obj.printer_id.id})\n"
"        return res\n"
"\n"
"    def onchange_data(self, cr, uid, ids, automatic, shop_id=None, printer_id=None, context=None):\n"
"        doc_obj = self.pool.get('sri.type.document')\n"
"        values = {}\n"
"        if context is None:\n"
"            context = {}\n"
"        company_id = self.pool.get('res.company')._company_default_get(cr, uid, 'stock.picking', context=context)\n"
"        shop_ids = []\n"
"        curr_shop = False\n"
"        if shop_id:\n"
"            curr_shop = self.pool.get('sale.shop').browse(cr, uid, [shop_id, ], context)[0]\n"
"        curr_user = self.pool.get('res.users').browse(cr, uid, [uid, ], context)[0]\n"
"        if curr_shop:\n"
"            if printer_id:\n"
"                auth_line_id = doc_obj.search(cr, uid, [('name','=','delivery_note'), ('printer_id','=',printer_id), ('shop_id','=',curr_shop.id), ('state','=',True),])\n"
"                if auth_line_id:\n"
"                    if automatic:\n"
"                        values['automatic_number'] = doc_obj.get_next_value_secuence(cr, uid, 'delivery_note', False, company_id, curr_shop.id, printer_id, 'account.remision', 'number_out', context)\n"
"                        values['number'] = values['automatic_number']\n"
"                        values['date'] = time.strftime('%Y-%m-%d')\n"
"                else:\n"
"                    values['automatic'] = False\n"
"                    values['date'] = None\n"
"        return {'value': values, }\n"
"\n"
"    def fields_view_get(self, cr, uid, view_id=None, view_type='form', context=None, toolbar=False, submenu=False):\n"
"        result = super(stock_partial_picking, self).fields_view_get(cr, uid, view_id, view_type, context, toolbar, submenu)\n"
"        trans = False\n"
"        pick_obj = self.pool.get('stock.picking')\n"
"        picking_ids = context.get('active_ids', False)\n"
"\n"
"        if not picking_ids:\n"
"            return result\n"
"        for pick in pick_obj.browse(cr, uid, picking_ids, context=context):\n"
"            if pick.carrier_id:\n"
"                trans = True\n"
"            picking_type = self.get_picking_type(cr, uid, pick, context=context)\n"
"            if pick['type']=='in':\n"
"                return super(stock_partial_picking, self).fields_view_get(cr, uid, view_id, view_type, context, toolbar, submenu)\n"
"        _moves_arch_lst = \"<form string=\"%s\">\n"
"                        <field name=\"date\" invisible=\"1\"/>\n"
"                        <group height=\"400\" width=\"600\">\n"
"                            <separator colspan=\"4\" string=\"%s\"/>\n"
"                            <field name=\"%s\" colspan=\"4\" nolabel=\"1\" mode=\"tree,form\" height=\"200\" ></field>\n"
"                            <separator string=\"%s\" colspan=\"4\" />\n"
"                            <group colspan=\"4\" attrs=\"{'invisible':[('delivery_note','=',False)]}\">\n"
"                                <field name=\"automatic\" invisible=\"1\"/>\n"
"                                <field name=\"shop_id\" invisible=\"1\" on_change=\"onchange_data(automatic, shop_id, printer_id)\"/>\n"
"                                <field name=\"printer_id\" invisible=\"1\" on_change=\"onchange_data(automatic, shop_id, printer_id)\"/>\n"
"                                <field name=\"automatic_number\" attrs=\"{'invisible':[('automatic','!=',True)]}\" />\n"
"                                <field name=\"number\" attrs=\"{'invisible':[('automatic','=',True)],'required':[('automatic','=',False),('delivery_note','=',True)]}\"/>\n"
"                        \" % (_('Process Document'), _('Products'), \"product_moves_\" + picking_type, _(\"Options"
msgstr ""
"Generated by the picking # %s\" % picking['name']) ,\n"
"                                        'delivery_address': picking['address_id']['id'],\n"
"                                        'partner_id': picking ['partner_id']['id'],\n"
"                                        'stock_picking_id': picking['id'],\n"
"                                        'delivery_carrier': carrier,\n"
"                                        'shop_id':picking['shop_id']['id'],\n"
"                                        'printer_id':picking['printer_id']['id'],\n"
"                                        'sale_order':picking['sale_id']['id'],\n"
"                                        'type': self.defined_type_remision(picking['type']),\n"
"                                        'automatic': object.automatic,\n"
"                                        }\n"
"                            remision_id = remision_obj.create(cr, uid, vals_remi, context)\n"
"                            for line in picking.move_lines:\n"
"                                vals_remi_line= {\n"
"                                                 'quantity': line['product_qty'],\n"
"                                                 'product_id': line['product_id']['id'],\n"
"                                                 'remision_id': remision_id,\n"
"                                                 }\n"
"                                remision_line_id = remision_line_obj.create(cr, uid, vals_remi_line, context)\n"
"                        elif (picking['type']=='internal'):\n"
"                            vals_remi= {'number_out': number,\n"
"                                        'authorizacion_id': autorizacion,\n"
"                                        'partner_id': picking ['address_id']['partner_id']['id'],\n"
"                                        'transfer_date': time.strftime('%Y-%m-%d'),\n"
"                                        'delivery_date': picking['min_date'],\n"
"                                        'delivery_address': picking['address_id']['id'],\n"
"                                        'stock_picking_id': picking['id'],\n"
"                                        'shop_id':picking['shop_id']['id'],\n"
"                                        'printer_id':picking['printer_id']['id'],\n"
"                                        'type': self.defined_type_remision(picking['type']),\n"
"                                        'automatic': object.automatic,\n"
"                                        }\n"
"                            remision_id = remision_obj.create(cr, uid, vals_remi, context)\n"
"                            for line in picking.move_lines:\n"
"                                vals_remi_line= {\n"
"                                                 'quantity': line['product_qty'],\n"
"                                                 'product_id': line['product_id']['id'],\n"
"                                                 'remision_id': remision_id,\n"
"                                                 }\n"
"                                remision_line_id = remision_line_obj.create(cr, uid, vals_remi_line, context)\n"
"                        remision_obj.action_confirm(cr, uid, [remision_id,], context)\n"
"                    elif picking['state']=='assigned':\n"
"                        if picking['backorder_id']['id']:\n"
"                            picking=stock_picking_obj.browse(cr, uid, picking['backorder_id']['id'], context)\n"
"                            if bool:\n"
"                                number = self.pool.get('ir.sequence').get_id(cr, uid, vals_aut['sequence'])\n"
"                                autorizacion = vals_aut['authorization']\n"
"                            else:\n"
"                                shop = self.pool.get('sale.shop').search(cr, uid,[])[0]\n"
"                                company = self.pool.get('res.company').search(cr, uid,[])[0]\n"
"                                number = object['number']\n"
"                                auth = self.pool.get('sri.authorization').get_auth(cr, uid, 'delivery_note', company, shop, number, context)\n"
"                                if not auth['authorization']:\n"
"                                    raise osv.except_osv(_('Invalid action!'), _('Do not exist authorization for this number of secuence, please check'))\n"
"                                else:\n"
"                                    autorizacion = auth['authorization']\n"
"                            if picking['type']=='out':\n"
"                                if picking['carrier_id']:\n"
"                                    carrier= picking['carrier_id']['id']\n"
"                                else:\n"
"                                    carrier= object['delivery_carrier']['id']\n"
"                                vals_remi= {'number_out': number,\n"
"                                            'authorizacion_id': autorizacion,\n"
"                                            'transfer_date': time.strftime('%Y-%m-%d'),\n"
"                                            'delivery_date': picking['min_date'],\n"
"                                            'motive': _(\"Generated by the picking # %s\" % picking['name']),\n"
"                                            'delivery_address': picking['address_id']['id'],\n"
"                                            'partner_id': picking ['partner_id']['id'],\n"
"                                            'stock_picking_id': picking['id'],\n"
"                                            'delivery_carrier': carrier,\n"
"                                            'shop_id':picking['shop_id']['id'],\n"
"                                            'printer_id':picking['printer_id']['id'],\n"
"                                            'sale_order':picking['sale_id']['id'],\n"
"                                            'type': self.defined_type_remision(picking['type']),\n"
"                                            'automatic': object.automatic,\n"
"                                            }\n"
"                                remision_id = remision_obj.create(cr, uid, vals_remi, context)\n"
"                                for line in picking.move_lines:\n"
"                                    vals_remi_line= {\n"
"                                                 'quantity': line['product_qty'],\n"
"                                                 'product_id': line['product_id']['id'],\n"
"                                                 'remision_id': remision_id,\n"
"                                                 }\n"
"                                    remision_line_id = remision_line_obj.create(cr, uid, vals_remi_line, context)\n"
"                            elif (picking['type']=='internal'):\n"
"                                vals_remi= {'number_out': number,\n"
"                                            'authorizacion_id': autorizacion,\n"
"                                            'partner_id': picking ['address_id']['partner_id']['id'],\n"
"                                            'transfer_date': time.strftime('%Y-%m-%d'),\n"
"                                            'delivery_date': picking['min_date'],\n"
"                                            'delivery_address': picking['address_id']['id'],\n"
"                                            'stock_picking_id': picking['id'],\n"
"                                            'shop_id':picking['shop_id']['id'],\n"
"                                            'printer_id':picking['printer_id']['id'],\n"
"                                            'type': self.defined_type_remision(picking['type']),\n"
"                                            'automatic': object.automatic,\n"
"                                            }\n"
"                                remision_id = remision_obj.create(cr, uid, vals_remi, context)\n"
"                                for line in picking.move_lines:\n"
"                                    vals_remi_line= {\n"
"                                             'quantity': line['product_qty'],\n"
"                                             'product_id': line['product_id']['id'],\n"
"                                             'remision_id': remision_id,\n"
"                                             }\n"
"                                    remision_line_id = remision_line_obj.create(cr, uid, vals_remi_line, context)\n"
"                            remision_obj.action_confirm(cr, uid, [remision_id,], context)\n"
"\n"
"        act_obj = self.pool.get('ir.actions.act_window')\n"
"        mod_obj = self.pool.get('ir.model.data')\n"
"\n"
"        model_data_ids = mod_obj.search(cr,uid,[('model','=','ir.ui.view'),('name','=','view_account_remision_form')])\n"
"        resource_id = mod_obj.read(cr, uid, model_data_ids, fields=['res_id'])[0]['res_id']\n"
"        \n"
"        if remision_id:\n"
"            return {\n"
"                'name': _('Delivery Note'),\n"
"                'view_type': 'form',\n"
"                'view_mode': 'form',\n"
"                'res_model': 'account.remision',\n"
"                'views': [(resource_id,'form')],\n"
"                'type': 'ir.actions.act_window',\n"
"                'target': 'current',\n"
"                'res_id': [remision_id],\n"
"                'context': context,\n"
"            }\n"
"        else:\n"
"            return {'type': 'ir.actions.act_window_close'}\n"
"\n"
"    def _get_automatic(self, cr, uid, context=None):\n"
"        user = self.pool.get('res.users').browse(cr, uid, uid, context=context)\n"
"        return user.company_id.generate_automatic\n"
"\n"
"    def default_get(self, cr, uid, fields, context=None):\n"
"        doc_obj = self.pool.get('sri.type.document')\n"
"        if context is None:\n"
"            context = {}\n"
"        values = {}\n"
"        pick_obj = self.pool.get('stock.picking')\n"
"        res = super(stock_partial_picking, self).default_get(cr, uid, fields, context)\n"
"        picking_ids = context.get('active_ids', [])\n"
"        if not picking_ids:\n"
"            return res\n"
"        objs = pick_obj.browse(cr , uid, picking_ids)\n"
"        company_id = self.pool.get('res.company')._company_default_get(cr, uid, 'stock.picking', context=context)\n"
"        automatic = self._get_automatic(cr, uid, context)\n"
"        for obj in objs:\n"
"            if obj.type in ('out', 'internal'):\n"
"                if 'automatic_number' in fields and 'number' in fields:\n"
"                    auth_line_id = doc_obj.search(cr, uid, [('name','=','delivery_note'), ('printer_id','=',obj.printer_id.id), ('shop_id','=',obj.shop_id.id), ('state','=',True),])\n"
"                    if auth_line_id:\n"
"                        if automatic:\n"
"                            automatic_number = doc_obj.get_next_value_secuence(cr, uid, 'delivery_note', False, company_id, obj.shop_id.id, obj.printer_id.id, 'account.remision', 'number_out', context)\n"
"                            res.update({'automatic_number': automatic_number})\n"
"                            res.update({'number': automatic_number})\n"
"                if 'carrier_id' in fields:\n"
"                    res.update({'carrier_id': obj.carrier_id.id})                \n"
"                if 'delivery_note' in fields:\n"
"                    res.update({'delivery_note': obj.delivery_note})\n"
"                if 'shop_id' in fields:\n"
"                    res.update({'shop_id': obj.shop_id.id})\n"
"                if 'printer_id' in fields:\n"
"                    res.update({'printer_id': obj.printer_id.id})\n"
"        return res\n"
"\n"
"    def onchange_data(self, cr, uid, ids, automatic, shop_id=None, printer_id=None, context=None):\n"
"        doc_obj = self.pool.get('sri.type.document')\n"
"        values = {}\n"
"        if context is None:\n"
"            context = {}\n"
"        company_id = self.pool.get('res.company')._company_default_get(cr, uid, 'stock.picking', context=context)\n"
"        shop_ids = []\n"
"        curr_shop = False\n"
"        if shop_id:\n"
"            curr_shop = self.pool.get('sale.shop').browse(cr, uid, [shop_id, ], context)[0]\n"
"        curr_user = self.pool.get('res.users').browse(cr, uid, [uid, ], context)[0]\n"
"        if curr_shop:\n"
"            if printer_id:\n"
"                auth_line_id = doc_obj.search(cr, uid, [('name','=','delivery_note'), ('printer_id','=',printer_id), ('shop_id','=',curr_shop.id), ('state','=',True),])\n"
"                if auth_line_id:\n"
"                    if automatic:\n"
"                        values['automatic_number'] = doc_obj.get_next_value_secuence(cr, uid, 'delivery_note', False, company_id, curr_shop.id, printer_id, 'account.remision', 'number_out', context)\n"
"                        values['number'] = values['automatic_number']\n"
"                        values['date'] = time.strftime('%Y-%m-%d')\n"
"                else:\n"
"                    values['automatic'] = False\n"
"                    values['date'] = None\n"
"        return {'value': values, }\n"
"\n"
"    def fields_view_get(self, cr, uid, view_id=None, view_type='form', context=None, toolbar=False, submenu=False):\n"
"        result = super(stock_partial_picking, self).fields_view_get(cr, uid, view_id, view_type, context, toolbar, submenu)\n"
"        trans = False\n"
"        pick_obj = self.pool.get('stock.picking')\n"
"        picking_ids = context.get('active_ids', False)\n"
"\n"
"        if not picking_ids:\n"
"            return result\n"
"        for pick in pick_obj.browse(cr, uid, picking_ids, context=context):\n"
"            if pick.carrier_id:\n"
"                trans = True\n"
"            picking_type = self.get_picking_type(cr, uid, pick, context=context)\n"
"            if pick['type']=='in':\n"
"                return super(stock_partial_picking, self).fields_view_get(cr, uid, view_id, view_type, context, toolbar, submenu)\n"
"        _moves_arch_lst = \"<form string=\"%s\">\n"
"                        <field name=\"date\" invisible=\"1\"/>\n"
"                        <group height=\"400\" width=\"600\">\n"
"                            <separator colspan=\"4\" string=\"%s\"/>\n"
"                            <field name=\"%s\" colspan=\"4\" nolabel=\"1\" mode=\"tree,form\" height=\"200\" ></field>\n"
"                            <separator string=\"%s\" colspan=\"4\" />\n"
"                            <group colspan=\"4\" attrs=\"{'invisible':[('delivery_note','=',False)]}\">\n"
"                                <field name=\"automatic\" invisible=\"1\"/>\n"
"                                <field name=\"shop_id\" invisible=\"1\" on_change=\"onchange_data(automatic, shop_id, printer_id)\"/>\n"
"                                <field name=\"printer_id\" invisible=\"1\" on_change=\"onchange_data(automatic, shop_id, printer_id)\"/>\n"
"                                <field name=\"automatic_number\" attrs=\"{'invisible':[('automatic','!=',True)]}\" />\n"
"                                <field name=\"number\" attrs=\"{'invisible':[('automatic','=',True)],'required':[('automatic','=',False),('delivery_note','=',True)]}\"/>\n"
"                        \" % (_('Process Document'), _('Products'), \"product_moves_\" + picking_type, _(\"Options"

#. module: ecua_remision
#: field:account.cancel.remision.line.wizard,number:0
#: field:account.remision,number:0
#: field:account.remision,number_in:0
#: field:account.remision,number_out:0
#: field:stock.partial.picking,automatic_number:0
#: field:stock.partial.picking,number:0
msgid "Number"
msgstr "Número"

#. module: ecua_remision
#: view:account.remision:0
msgid "Transfer Information"
msgstr "Información de Transferencia"

#. module: ecua_remision
#: view:account.remision:0
#: field:account.remision,motive:0
msgid "Motive"
msgstr "Motivo"

#. module: ecua_remision
#: selection:account.remision,state:0
msgid "Canceled"
msgstr "Cancelado"

#. module: ecua_remision
#: view:account.cancel.remision.wizard:0
msgid "Continue"
msgstr "Continuar"

#. module: ecua_remision
#: field:account.remision,number_import:0
msgid "Number of import"
msgstr "Número de importación"

#. module: ecua_remision
#: field:account.remision,invoice_id:0
msgid "Invoice"
msgstr "Factura"

#. module: ecua_remision
#: model:ir.actions.report.xml,name:ecua_remision.delivery_note_report
msgid "Guía de Remisión"
msgstr "Guía de Remisión"

#. module: ecua_remision
#: view:account.cancel.remision.wizard:0
#: view:account.remision:0
msgid "Cancel"
msgstr "Cancelar"

#. module: ecua_remision
#: field:account.remision,partner_id:0
msgid "Partner"
msgstr "Cliente"

#. module: ecua_remision
#: model:ir.module.module,shortdesc:ecua_remision.module_meta_information
msgid "Ecuadorian Delivery Note"
msgstr "Guía de Remisión Ecuador"

#. module: ecua_remision
#: code:addons/ecua_remision/wizard/stock_partial_picking.py:375
#, python-format
msgid "Process Document"
msgstr "Procesar Documento"

#. module: ecua_remision
#: code:addons/ecua_remision/objects/stock_picking.py:98
#, python-format
msgid "Please put a partner on the picking list if you want to generate invoice."
msgstr "Please put a partner on the picking list if you want to generate invoice."

